'''
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
'''
def fibo_0(k):
    '''
    Memoised version
    Complexity : O(k)
    '''
    fib_memo = {0: 1, 1: 1}
    def sub_fibo_0(n):
        if n in fib_memo:
            return fib_memo[n]
        else:
            f1 = sub_fibo_0(n-1)
            f2 = sub_fibo_0(n-2)
            fib_memo[n] = f1+f2
            return f1+f2

    result, i = 0, 0
    f = 1
    while f < k:
        i += 1
        f = sub_fibo_0(i)
        if f%2 == 0:
            result += f
    return result


def fibo_1(k):
    '''
    Naive version
    Complexity : O(((1+sqrt(5))/2)^k)
    '''
    def sub_fibo_1(n):
        if n <= 1 :
            return 1
        else:
            f1 = sub_fibo_1(n-1)
            f2 = sub_fibo_1(n-2)
            return f1+f2

    result, i = 0, 0
    f = 1
    while f < 4000000:
        i += 1
        f = sub_fibo_1(i)
        if f%2 == 0:
            result += f
    return result


if __name__ == '__main__':
    result = fibo_0(4000000)
    result = fibo_1(4000000)
    print(result)
